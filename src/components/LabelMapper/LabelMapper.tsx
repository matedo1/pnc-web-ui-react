import { Label as LabelPF, LabelProps as LabelPropsPF } from '@patternfly/react-core';

import { EmptyStateSymbol } from 'components/EmptyStateSymbol/EmptyStateSymbol';

import { uiLogger } from 'services/uiLogger';

interface ILabelMapperItem {
  text: string;
  color?: LabelPropsPF['color'];
}

export type ILabelMapper<Types> = {
  [key in Types as string]: ILabelMapperItem;
};

interface ILabelMapperProps {
  mapperItem?: ILabelMapperItem;
  onRemove?: () => void;
}

/**
 * Represents a Label generated by label mapper item.
 *
 * @param mapperItem - the mapper item that will be used to generate the label
 * @param onRemove - if passed, displays remove icon inside label
 */
export const LabelMapper = ({ mapperItem, onRemove }: ILabelMapperProps) => {
  if (!mapperItem) {
    uiLogger.error(`Error attempting to get mapper item: mapper item undefined`);
    return <EmptyStateSymbol text={false} />;
  }

  const { text, color } = mapperItem;
  const safeColor = color ?? 'grey';

  return (
    <LabelPF color={safeColor} onClose={onRemove}>
      {text}
    </LabelPF>
  );
};
